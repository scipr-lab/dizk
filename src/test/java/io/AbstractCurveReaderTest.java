package io;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

import algebra.curves.AbstractG1;
import algebra.curves.AbstractG2;
import algebra.fields.AbstractFieldElementExpanded;
import java.io.IOException;

/**
 * Base class of tests for binary curve readers. Tests against a data generated by
 * ec_operation_data_test in github.com/clearmatics/zeth. See
 * libzeth/tests/core/ec_operation_data_test.cpp, which generates data in the order given here.
 * Concrete tests, which instantiate this abstract class, are contained in the
 * tests/algebra/curves/... directories.
 */
public abstract class AbstractCurveReaderTest extends TestWithData {
  protected <
          FrT extends AbstractFieldElementExpanded<FrT>,
          G1T extends AbstractG1<G1T>,
          G2T extends AbstractG2<G2T>>
      void testReaderAgainstData(
          FrT oneFr, G1T oneG1, G2T oneG2, BinaryCurveReader<FrT, G1T, G2T> binReader)
          throws IOException {
    assertTrue(oneFr.construct(1).equals(binReader.readFr()));
    assertTrue(oneFr.construct(2).equals(binReader.readFr()));
    assertTrue(oneFr.construct(-2).equals(binReader.readFr()));

    assertTrue(oneG1.equals(binReader.readG1()));
    assertTrue(oneG1.mul(oneFr.construct(-1)).equals(binReader.readG1()));
    assertTrue(oneG1.mul(oneFr.construct(2)).equals(binReader.readG1()));
    assertTrue(oneG1.mul(oneFr.construct(3)).equals(binReader.readG1()));
    assertTrue(oneG1.mul(oneFr.construct(4)).equals(binReader.readG1()));
    assertTrue(oneG1.mul(oneFr.construct(6)).equals(binReader.readG1()));
    assertTrue(oneG1.mul(oneFr.construct(8)).equals(binReader.readG1()));
    assertTrue(oneG1.mul(oneFr.construct(-8)).equals(binReader.readG1()));

    assertTrue(oneG2.mul(oneFr.construct(1)).equals(binReader.readG2()));
    assertTrue(oneG2.mul(oneFr.construct(-1)).equals(binReader.readG2()));
    assertTrue(oneG2.mul(oneFr.construct(4)).equals(binReader.readG2()));
    assertTrue(oneG2.mul(oneFr.construct(8)).equals(binReader.readG2()));
    assertTrue(oneG2.mul(oneFr.construct(-8)).equals(binReader.readG2()));

    assertThrows(IOException.class, () -> binReader.readFr());
  }
}
